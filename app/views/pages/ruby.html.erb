<div class="container has-text-centered mb-6">
  <%= image_tag "ruby-page/ruby.svg", class: "guide-image mt-4" %>

  <h1 class="mt-6">Учебное пособие по Ruby</h1>
  <h2>Введение в язык программирования</h2>
</div>

<div class="container has-text-centered mt-5">
  <p>
    Ruby – это мощный и гибкий динамический язык программирования с упором на простоту и
    продуктивность. Он обладает элегантным синтаксисом, который приятно читать и легко писать.
  </p>

  <p>
    Его создатель Юкихиро Мацумото (также известный как “Matz”), объединил части его любимых
    языков (Perl, Smalltalk, Eiffel, Ada и Lisp) чтобы сформировать новый язык, в котором
    парадигма функционального программирования сбалансирована принципами императивного
    программирования.
  </p>

  <p>
    Со времени выпуска публичной версии в 1995 году, Ruby привлек внимание программистов со
    всего мира. В 2006 году Ruby завоевал массовое признание.
  </p>

  <p>Ruby это:</p>

  <ol class="m-5">
    <li>
      <b>Высокоуровневый язык</b> разработанный для быстроты и удобства использования программистом.
      Основная черта высокоуровневых языков – это абстракция, то есть введение смысловых конструкций,
      кратко описывающих такие структуры данных и операции над ними, описания которых на машинном коде
      (или другом низкоуровневом языке программирования) очень длинны и сложны для понимания.
    </li>
    <li>
      <b>Интерпретируемый язык</b> программирования, что означает, что вам не нужен компилятор для
      написания и запуска.
    </li>
    <li>
      <b>Объектно-ориентированный язык</b>, основанный на представлении программы в виде совокупности
      объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию
      наследования.
    </li>
  </ol>
</div>

<div class="container has-text-centered mt-6">
  <h4>Переменные</h4>

  <p class="mt-4">
    Одно из самых основных понятий в компьютерном программировании – это переменная. Например, предположим,
    что вам нужно число 25, но вы не собираетесь использовать его сразу. Вы можете установить переменную,
    например <code>my_num</code>, чтобы записать значение <code>25</code> и привязать его для последующего
    использования. В Ruby переменные объявляются следующим способом:
  </p>

  <code>my_num = 25</code>

  <p class="mt-5">
    Вы пишете имя переменной, например <code>my_num</code>, и используете знак <code>=</code>, чтобы
    присвоить ему значение.
  </p>

  <p>В Ruby есть пять типов переменных:</p>

  <ol>
    <li>Локальные переменные</li>
    <li>Переменные экземпляра</li>
    <li>Переменные класса</li>
    <li>Константы</li>
    <li>Глобальные переменные</li>
  </ol>

  <p class="mt-5">
    <b>Локальные переменные</b> начинаются со строчной буквы или символа подчеркивания <code>_</code>. В
    примере выше использовалась локальная переменная <code>my_num</code>. Область видимости локальной
    переменной может ограничиваться классом, модулем, функцией, оператором end или блоком <code>{}</code>.
  </p>

  <p>Обращение к неинициализированной переменной обрабатывается как ее объявление.</p>

  <p>
    Переменная экземпляра – это переменная, являющаяся членом экземпляра класса (например, связанная
    с чем-то, созданным с помощью <code>.new</code> ).
  </p>

  <p>Переменные экземпляра начинаются с символа <code>@</code>, например:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      class Customer
        def initialize(id, name, addr)
          @cust_id=id
          @cust_name=name
          @cust_addr=addr
        end
        ...
      end
    </code>
  </div>

  <p class="mt-5">
    Здесь <code>@cust_id</code>, <code>@cust_name</code> и <code>@cust_addr</code> – переменные
    объекта (или инстанса класса).
  </p>

  <p>
    <b>Переменные класса</b> определяются на уровне класса и применяются ко всем объектам, созданным
    на его основе. Такая переменная, как правило, имеет одно и то же значение внутри всех объектов на
    основе этого класса.
  </p>

  <p>
    Переменные класса начинаются с двух символов <code>@</code>, т.е. – <code>@@</code> и должны быть
    проинициализированы перед использованием в методах. Ссылка на неинициализированную переменную класса
    вызовет ошибку. Переменные класса доступны всем потокам класса или модуля, в которых они заданы.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      class Customer
        @@no_of_customers = 0
        def initialize(id, name, addr)
          ...
        end
    </code>
  </div>

  <p class="mt-5">Здесь <code>@@no_of_customers</code> является переменной класса.</p>

  <p>
    Константы всегда обозначаются буквами в верхнем регистре. Область видимости констант, заданных в
    классе или модуле ограничивается этим классом или модулем, тогда как константы заданные вне
    класса — будут доступны глобально.
  </p>

  <p>
    Определять константу можно вне методов класса. Обращение к неинициализированной константе вызовет
    ошибку, а попытка изменить значение константы вызовет предупреждение.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      class Example
        VAR1 = 100
        VAR2 = 200
        def initialize(id, name, addr)
        ...
        end
      end
    </code>
  </div>

  <p class="mt-5">Здесь <code>VAR1</code> и <code>VAR2</code> являются константами.</p>

  <p>
    Глобальные переменные имеют имя, которое начинается с символа <code>$</code>. Данная переменная
    может быть доступна из любого места программы. Перед инициализацией глобальная переменная имеет
    особое значение <code>nil</code>.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      $global_variable = 10
      class Example
        ...
      end
    </code>
  </div>

  <p class="mt-5">Здесь <code>global_variable</code> является глобальной переменной.</p>
</div>

<div class="container has-text-centered mt-6">
  <h4>Ключевые слова и идентификаторы</h4>

  <p class="mt-4">
    Ключевые (или зарезервированные) слова в Ruby обычно не применяются ни для каких иных целей. Вот
    их полный перечень:
  </p>

  <table style="margin: 0 auto">
    <tr>
      <td>BEGIN</td>
      <td>END</td>
      <td>alias</td>
      <td>and</td>
      <td>begin</td>
    </tr>
    <tr>
      <td>break</td>
      <td>case</td>
      <td>class</td>
      <td>def</td>
      <td>defined?</td>
    </tr>
    <tr>
      <td>do</td>
      <td>else</td>
      <td>elsif</td>
      <td>end</td>
      <td>ensure</td>
    </tr>
    <tr>
      <td>false</td>
      <td>for</td>
      <td>if</td>
      <td>in</td>
      <td>module</td>
    </tr>
    <tr>
      <td>next</td>
      <td>nil</td>
      <td>not</td>
      <td>or</td>
      <td>redo</td>
    </tr>
    <tr>
      <td>rescue</td>
      <td>retry</td>
      <td>return</td>
      <td>self</td>
      <td>super</td>
    </tr>
    <tr>
      <td>then</td>
      <td>true</td>
      <td>undef</td>
      <td>unless</td>
      <td>until</td>
    </tr>
    <tr>
      <td>when</td>
      <td>while</td>
      <td>yield</td>
    </tr>
  </table>

  <p class="mt-5">
    Имена переменных и других идентификаторов обычно начинаются с буквы или специального
    модификатора. Основные правила таковы:
  </p>

  <ul class="m-5">
    <li>
      имена локальных переменных (и таких псевдопеременных, как <code>self</code> и <code>nil</code>)
      начинаются со строчной буквы или подчерка;
    </li>
    <li>
      имена глобальных переменных начинаются со знака доллара <code>$</code>;
    </li>
    <li>
      имена переменных экземпляра (принадлежащих объекту) начинаются со знака собаки <code>@</code>;
    </li>
    <li>
      имена переменных класса (принадлежащих классу) начинаются с двух знаков собаки <code>@@</code>;
    </li>
    <li>
      имена констант начинаются с заглавной буквы;
    </li>
    <li>
      в именах идентификаторов подчерк (<code>_</code>) можно использовать наравне со строчными буквами;
    </li>
    <li>
      специальные переменные, имена которых начинаются со знака доллара (например, <code>$1</code>
      и <code>$/</code>), устанавливаются самим интерпретатором Ruby;
    </li>
  </ul>
</div>

<div class="container has-text-centered mt-6">
  <h4>Типы</h4>

  <p class="mt-4">
    В Ruby переменные не имеют типа, однако объекты, на которые переменные ссылаются,
    тип имеют. Простейшие типы – это символ, число и строка.
  </p>

  <p>
    <b>Строка</b>, заключенная в двойные кавычки, допускает интерполяцию выражений, а заключенная
    в одинарные кавычки интерпретируется почти буквально – в ней распознается только экранированная
    обратная косая черта.
  </p>

  <p>
    Ниже показана “интерполяция” переменных и выражений в строку, заключенную в двойные кавычки:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      a = 3
      b = 79
      puts “#{а} умноженное на #{Ь} равно #{а*b}”
      # Результат: “3 умноженное на 79 равно 237”
    </code>
  </div>

  <p class="mt-5">
    <b>Массивы</b> в Ruby – очень мощная конструкция, они могут содержать данные любого типа. Более
    того, в одном массиве можно хранить данные разных типов.
  </p>

  <p>
    Все массивы – это экземпляры класса <code>Array</code>, а потому к ним применимы разнообразные
    методы. Массив-константа заключается в квадратные скобки:
  </p>

  <code>[1, 2, "alpha", [3, 4]]</code>

  <p class="mt-5">
    В примере массив содержит числа, строку и вложенный массив.
  </p>

  <p>
    Как и в большинстве других языков, нумерация элементов массива начинается с нуля. Так, в примере
    выше элемент <code>"alpha"</code> имеет индекс 2. Все массивы динамические, задавать размер при
    создании не нужно.
  </p>

  <p>
    Поскольку массивы строк встречаются очень часто (а набирать их неудобно), для них предусмотрен
    специальный синтаксис:
  </p>

  <code>%w[ alpha beta gamma delta ]</code>

  <p class="mt-5">
    В данном случае не нужны ни кавычки, ни запятые – элементы разделяются пробелами. Если встречаются
    элементы, содержащие внутренние пробелы, такой синтаксис, конечно, неприменим.
  </p>

  <p>
    Для доступа к конкретному элементу массива по индексу применяются квадратные скобки. Можно как
    получить элемент, так и присвоить ему новое значение:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      val = myarray[0]
      x[i] = x[i+1]
    </code>
  </div>

  <p class="mt-5">
    <b>Хэш</b> – еще одна важная конструкция в Ruby – это множество пар данных, обыкновенно он
    применяется в качестве справочной таблицы или как обобщенный массив, в котором индекс не
    обязан быть целым числом. Все хэши являются экземплярами класса <code>Hash</code>.
  </p>

  <p>
    Хэш-константа как правило заключается в фигурные скобки, а ключи отделяются от значений
    символом <code>=></code>. Ключ можно считать индексом для доступа к ассоциированному с
    ним значению. На типы ключей и значений не налагается никаких ограничений. Примеры:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25, 6 => 36 )
      { "cat" => "cats", "ох" => "oxen", "bacterium" => "bacteria"}
      { "odds" => [1,З,5,7j, "evens" => [2,4,6,8] }
      ( "foo"=> 123, [4,5,6] => "my array", "867-5309" => "Jenny" }
    </code>
  </div>

  <p class="mt-5">
    Для хэшей имеется еще одна синтаксическая конструкция, она позволяет создавать ключи,
    являющиеся экземплярами класса <code>Symbol</code>.
  </p>

  <code>{ hydrogen: 1, helium: 2, carbon: 12 )</code>

  <p class="mt-5">
    К содержимому хэша-переменной доступ осуществляется так же, как для массивов, с помощью
    квадратных скобок:
  </p>

  <code>phone_numbers["Jenny"]</code>
</div>

<div class="container has-text-centered mt-6">
  <h4>Операторы и приоритеты</h4>

  <p class="mt-4">
    Познакомившись с основными типами данных, перейдем к операторам в языке Ruby. В приведенной
    ниже таблипе они представлены в порядке убывания приоритета:
  </p>

  <table style="margin: 0 auto">
    <tr>
      <td><code>::</code></td>
      <td>Разрешение области видимости</td>
    </tr>
    <tr>
      <td><code>[]</code></td>
      <td>Взятие индекса</td>
    </tr>
    <tr>
      <td><code>**</code></td>
      <td>Возведение в степень</td>
    </tr>
    <tr>
      <td><code>+ - ! ~</code></td>
      <td>Унарный плюс/минус, НЕ...</td>
    </tr>
    <tr>
       <td><code>* / %</code></td>
      <td>Умножение, деление</td>
    </tr>
    <tr>
      <td><code>+ -</code></td>
      <td>Сложение/вычитание</td>
    </tr>
    <tr>
      <td><code><< >></code></td>
      <td>Логические сдвиги</td>
    </tr>
    <tr>
      <td><code>&</code></td>
      <td>Поразрядное И</td>
    </tr>
    <tr>
      <td><code>|| ^</code></td>
      <td>Поразрядное ИЛИ, исключающее ИЛИ</td>
    </tr>
    <tr>
      <td><code>&lt; &gt;= &gt; &lt;=</code></td>
      <td>Сравнение</td>
    </tr>
    <tr>
      <td><code>== === <=> != =~ !~</code></td>
      <td>Равенство, неравенство...</td>
    </tr>
    <tr>
      <td><code>&&</code></td>
      <td>Логическое И</td>
    </tr>
    <tr>
      <td><code>||</code></td>
      <td>Логическое ИЛИ</td>
    </tr>
    <tr>
      <td><code>.. ...</code></td>
      <td>Операторы диапазона</td>
    </tr>
    <tr>
      <td><code>= += -=</code></td>
      <td>Присваивание</td>
    </tr>
    <tr>
      <td><code>?:</code></td>
      <td>Тернарный выбор</td>
    </tr>
    <tr>
       <td><code>not</code></td>
      <td>Логическое отрицание</td>
    </tr>
    <tr>
      <td><code>and or</code></td>
      <td>Логическое И, ИЛИ</td>
    </tr>
  </table>
</div>

<div class="container has-text-centered mt-6">
  <h4>Синтаксис</h4>

  <ul class="m-5">
    <li>
      Скобки при вызове методов как правило можно опускать. Все следующие вызовы допустимы:

      <div style="text-align: initial">
        <code class="wrap-code">
          foobar
          foobar()
          foobar(a, b, c)
          foobar a, b, c
        </code>
      </div>

      В данном случае <code>foobar</code> является каким-то методом.
    </li>
    <li>
      Попробуем передать методу хэш:
      <br/>
      <code>my_method { а: 1, b: 2, 5 => 25 }</code>
      <br/>
      Это приведет к синтаксической ошибке, поскольку левая фигурная скобка воспринимается как
      начало блока. В данном случае скобки необходимы:
      <br/>
      <code>my_method({ а: 1, b: 2, 5 => 25 })</code>
    </li>
    <li>
      Предположим теперь, что хэш – едииствепный (или последний) параметр метода. Ruby снисходительно
      разрешает опускать фигурные скобки:
      <br/>
      <code>my_method(а: 1, b: 2, 5 => 25)</code>
      <br/>
      Кто-то увидит здесь вызов метода с именованными параметрами. На самом деле, это не так, хотя никто
      не запрещает применять подобную конструкцию и в таком смысле.
    </li>
    <li>
      Есть и другие случаи, когда пропуски имеют некоторое значение. Например, на первый взгляд вce
      четыре выражения ниже означают одно и то же:

      <div style="text-align: initial">
        <code class="wrap-code">
          х=у+z
          х = y+z
          х = у+ z
          х = у +z
        </code>
      </div>

      Фактически же лишь первые три эквивалентны. А в четвертом случае анализатор считает, что вызван
      метод <code>у</code> с параметром <code>+z</code>. И выдаст сообщение об ошибке, так как метода
      с именем <code>у</code> не существует.
    </li>
    <li>
      Аналогично, <code>х = y*z</code> – это умножение <code>y</code> на <code>z</code>, тогда как
      <code>х = у *z</code> – вызов метода <code>у</code>, которому в качестве параметра передается
      расширение массива <code>z</code>.
    </li>
    <li>
      В именах идентификаторов подчерк считается строчной буквой. Следовательно, имя идентификатора
      может начинаться с подчерка, но такой идентификатор не будет считаться константой, даже если
      следующая буква заглавная.
    </li>
    <li>
      В линейной последовательности вложенных предложений <code>if</code> применяется ключевое слово
      <code>elsif</code>, а не <code>else if</code> или <code>elif</code>, как в некоторых других языках.
    </li>
    <li>
      Ключевые слова в Ruby нельзя назвать по-настоящему зарезервированными. Если метод вызывается от
      имени некоторого объекта (и в других случаях, когда не возникает неоднозначности, имя метода
      может совпадать с ключевым словом. Но поступайте так с осторожностью, не забывая, что код будут
      читать другие люди
    </li>
    <li>
      Ключевое слово <code>then</code> (в предложениях <code>if</code> и <code>case</code>) необязательно.
      Если вам кажется, что с ним программа понятнее, включайте. То же относится к слову <code>do</code> в
      циклах <code>while</code> и <code>until</code>.
    </li>
    <li>
      Вопросительный и восклицательный знаки не являются частью идентификатора, который модифицируют, их
      следует рассматривать как суффиксы. Таким образом, хотя идентификаторы <code>chop</code> и <code>chop!</code>
      считаются различными, использовать восклицательный знак в любом другом месте имени не разрешается. Аналогично,
      в Ruby есть конструкция <code>defined?</code>, но <code>defined</code> – ключевое слово.
    </li>
    <li>
      Внутри строки символ решётки – признак начала выражения. Значит, в некоторых случаях его следует
      экранировать обратной косой чертой, но лишь тогда, когда сразу за ним идет символ <code>{</code>,
      <code>$</code> или <code>@</code>.
    </li>
    <li>
      Поскольку вопросительный знак можно добавлять в конец идентификатора, то следует аккуратно
      расставлять пробелы в тернарном операторе. Пусть, например, имеется переменная <code>my_flag</code>,
      которая  может принимать значения <code>true</code> или <code>false</code>. Тогда первое из следующих
      предложений правильно, а второе содержит синтаксическую ошибку:

      <div style="text-align: initial">
        <code class="wrap-code">
          х = my_flag ? 23 : 45 # правильно
          х = my_flag? 2З : 45 # синтаксическая ошибка
        </code>
      </div>
    </li>
    <li>
      В Ruby есть несколько псевдопеременных, которые выглядят как локальные переменные, но применяются
      для специальный целей. Это <code>self</code>, <code>nil</code>, <code>true</code> и <code>false</code>.
    </li>
  </ul>
</div>

<div class="container has-text-centered mt-5 mb-6">
  <h4>Полезные ссылки:</h4>

  <div class="useful-links">
    <a href="https://www.codecademy.com/learn/learn-ruby/modules/learn-ruby-introduction-to-ruby-u/cheatsheet" target="_blank">
      Введение в Ruby
    </a>

    <a href="https://www.codecademy.com/learn/learn-ruby" target="_blank">
      Интерактивный курс по Ruby
    </a>
  </div>
</div>
