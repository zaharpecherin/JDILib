<div class="container has-text-centered mb-6">
  <%= image_tag "sql-page/sql.svg", class: "guide-image mt-4" %>

  <h1 class="mt-6">Учебное пособие по SQL</h1>
  <h2>Введение в основы управления данными в реляционной базе данных</h2>
</div>

<div class="container has-text-centered mt-5">
  <p>
    SQL – это язык программирования декларативного типа. В отличие от привычных нам процедурных
    языков, в которых есть условия, циклы и функции, в декларативных языках подобных алгоритмических
    конструкций почти нет. Декларативные выражения представляют собой скорее запросы, описание того,
    что хочет получить человек.
  </p>

  <p>
    В случае SQL человек формулирует запрос на извлечение или модификацию данных, а алгоритм его
    выполнения почти полностью ложится на плечи конкретной СУБД. Хотя если один и тот же результат
    может быть получен с помощью разных запросов, программисту лучше выбрать тот, который создаст
    меньшую нагрузку на СУБД. То есть программисту желательно иметь представление о том, как работает
    СУБД.
  </p>

  <p>
    Запрос производится к таблицам базы данных, результатом обработки запроса также является таблица,
    которую при желании можно сохранить.
  </p>

  <p>
    Язык SQL предназначен для создания и изменения реляционных баз данных, а также извлечения из них
    данных. Другими словами, SQL – это инструмент, с помощью которого человек управляет базой данных.
    При этом ключевыми операциями являются создание таблиц, добавление записей в таблицы, изменение и
    удаление записей, выборка записей из таблиц, изменение структуры таблиц.
  </p>

  <p>
    База данных состоит из трех элементов: <b>таблица, строка и столбец</b>.
  </p>

  <ul class="m-5">
    <li>
      Таблица – это основной структурный элемент базы данных. При чем в одной базе может быть несколько
      таблиц. С точки зрения безопасности и удобства использования считается правильным хранить в каждой
      таблице только определенный тип данных. При создании таблицы нужно присвоить ей уникальное имя. В
      одной базе не может быть таблиц с одинаковыми именами, также нужно указать из каких столбцов она
      состоит и тоже присвоить им имена.
    </li>
    <li>
      Столбец (колонка) – это структурный элемент уже таблицы. Для каждого столбца нужно указать какой
      именно тип данных разрешено в нем хранить. Это может быть текст, числа, диапазоны чисел, файлы,
      логические значения и т.д.
    </li>
    <li>
      Каждой записи в таблице соответствует отдельная строка. Т.е. по сути строка – это отдельная запись
      в таблице. Каждой строке должен быть присвоен так называемый “<i>первичный ключ</i>” – это уникальный
      идентификатор строки. Он позволяет в последствии обращаться именно к этой строке. В принципе любой
      столбец может выступать первичным ключом. Главное соблюдать некоторые правила: он должен быть
      уникальным для каждой строки и должен обязательно иметь какое-либо присвоенное значение (он не может
      быть <code>null</code>), и его нельзя менять.
    </li>
  </ul>
</div>

<div class="container has-text-centered mt-6">
  <h4>Создание базы данных и таблиц в SQL</h4>

  <p class="mt-4">
    Для создания новой базы данных используется команда <code>CREATE DATABASE</code>. Потом указывается
    имя новой базы и окончанием в виде точки с запятой <code>;</code>.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      CREATE DATABASE all_users;
    </code>
  </div>

  <p class="mt-5">
    Так мы создали базу данных с именем <code>all_users</code>. Для того, чтобы работать с этой базой,
    мы должны использовать команду <code>USE</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      USE all_users;
    </code>
  </div>

  <p class="mt-5">
    Если базу данных нужно удалить, используется команда <code>DROP DATABASE имя_базы;</code>.
  </p>

  <p>
    Командой <code>DROP</code> можно удалять не только базы. Например, чтобы удалить таблицу используется
    команда <code>DROP TABLE имя_таблицы;</code>. А если нужно удалить все данные из таблицы, но саму
    таблицу при этом оставить, то есть команда: <code>TRUNCATE TABLE имя_таблицы;</code>.
  </p>

  <p>
    Для создания таблиц используется команда <code>CREATE TABLE</code>. После которой нужно указать название
    новой таблицы. А потом в скобках, через запятую, перечислить какие в таблице будут колонки и типы данных
    в этих колонках. Для примера создадим таблицу с именами пользователей и их статусом на сайте:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      CREATE TABLE users_nick (id INT AUTO_INCREMENT PRIMARY KEY, nick NVARCHAR(64) NOT NULL, status NVARCHAR(32));
    </code>
  </div>

  <p class="mt-5">
    Чтобы посмотреть, что мы создали, мы можем воспользоваться командой:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SHOW COLUMNS FROM users_nick;
    </code>
  </div>

  <%= image_tag "sql-page/show-columns.png", class: "code-image mt-5" %>

  <p class="mt-5">
    <code>id INT AUTO_INCREMENT PRIMARY KEY</code> – первый столбец таблицы, названный <code>id</code>
    имеет тип данных <code>INT</code> т.е. целочисленные значения (это означает что там не может быть
    дробей, букв, символов – ничего кроме целых чисел). Командой <code>AUTO_INCREMENT</code> мы попросили
    MySQL самостоятельно заполнять строки этой колонки при внесении новых записей в таблицу, при этом добавляя
    +1 к каждой новой записи. Другими словами мы создали счётчик, чтобы добиться уникальности значений именно
    в этой колонке. А уникальные значения нам нужны чтобы применить параметр <code>PRIMARY KEY</code> т.е.
    назначить значения из этой колонки первичными ключами – уникальными идентификаторами строк таблицы.
    Используя значения именно из этой колонки мы в последствии будем обращаться к строкам в этой таблице.
  </p>

  <p>
    <code>nick NVARCHAR(64) NOT NULL</code> – второй столбец мы назвали <code>nick</code>. И присвоили
    ему тип <code>NVARCHAR</code> это строковые данные переменного размера, при этом ограничив размер
    значения 64 байтами.
  </p>

  <p>
    <code>status NVARCHAR(32)</code> – третий столбец мы назвали <code>status</code>. Тип – строковые
    данные переменного размера, размер – 32 байта, и раз мы не указывали <code>NOT NULL</code> – этот
    столбец может быть пустым.
  </p>

  <p>
    Также создадим таблицу в которой будут перечислены возможные статусы пользователей:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      CREATE TABLE users_status (id INT AUTO_INCREMENT PRIMARY KEY, status NVARCHAR(32));
    </code>
  </div>

  <p class="mt-5">
    Чтобы посмотреть все созданные нами таблицы используется команда:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SHOW TABLES;
    </code>
  </div>

  <%= image_tag "sql-page/show-tables.png", class: "code-image mt-5" %>

  <p class="mt-5">
    Если нужно удалить отдельную запись из таблицы, то используется команда <code>DELETE</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      DELETE FROM users_nick WHERE id = 1;
    </code>
  </div>
</div>

<div class="container has-text-centered mt-6">
  <h4>Добавление данных в таблицы SQL</h4>

  <p class="mt-4">
    Теперь нужно заполнить данными созданные нами таблицы т.е. добавить строки. Для этого используется
    команда <code>INSERT</code>. Она может добавлять строки тремя способами:
  </p>

  <ul class="m-5">
    <li>Полную строку</li>
    <li>Часть строки</li>
    <li>Результат запроса</li>
  </ul>

  <p class="mt-5">Начнем с таблицы статусов</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      INSERT INTO users_status (status) VALUES ('admin');
    </code>
  </div>

  <p class="mt-5">
    Мы добавили только часть строки, пропустив столбец <code>status</code>. В такой ситуации туда будет
    записано значение <code>NULL</code> т.е . пусто, но только если мы не указывали параметр <code>NOT NULL</code>
    для этого столбца.
  </p>

  <p>Для изменения какого-то значения в таблице применяется команда <code>UPDATE</code>:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      UPDATE users_status SET status = 'administrator' WHERE id = 1;
    </code>
  </div>

  <p class="mt-5">
    По сути мы сказали: обнови значение в таблице <code>users_status</code> в столбце <code>status</code>
    на <code>administrator</code> где <code>id=1</code>. Используя <code>WHERE</code> мы задали условия
    для поиска нужной нам записи. Если не указать условие, используя <code>WHERE</code> мы обновим все
    значение в таблице.
  </p>
</div>

<div class="container has-text-centered mt-6">
  <h4>Извлечение данных из таблицы SQL</h4>

  <p class="mt-4">
    Для того чтобы извлечь данные из одной или нескольких таблиц используется команда <code>SELECT</code>.
    Чтобы эта команда была выполнена корректно нужно указать два параметра: что получить и откуда.
  </p>

  <p>
    Так, например, что бы получить все имена пользователей из нашей таблицы, нам нужно написать:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT nick FROM users_nick;
    </code>
  </div>

  <%= image_tag "sql-page/select-nick.png", class: "code-image mt-5" %>

  <p class="mt-5">
    Таким образом мы увидели список пользователей из столбца <code>nick</code> таблицы <code>users_nick</code>.
    По такому же принципу мы можем вывести данные нескольких столбцов, указав их через запятую. Либо, если мы
    хотим увидеть всю нашу таблицу, то вместо перечисления столбцов нужно поставить символ <code>*</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT * FROM users_nick;
    </code>
  </div>

  <%= image_tag "sql-page/select-all.png", class: "code-image mt-5" %>
</div>

<div class="container has-text-centered mt-6">
  <h4>Сортировка данных</h4>

  <p class="mt-4">
    Самым простым способом сортировки является использование условий, например:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT * FROM users_nick WHERE status = 'user';
    </code>
  </div>

  <%= image_tag "sql-page/select-where.png", class: "code-image mt-5" %>

  <p class="mt-5">
    В этом запросе мы достали записи в таблице <code>users_nick</code> в которых, в столбце <code>status</code>
    присвоено значение <code>user</code>. При этом нужно помнить, что в условии <code>WHERE</code> можно
    использовать логические операторы (AND/OR) и математические операторы сравнения (=, <, >, <=, >=, <>).
    Также существует поиск по шаблону, для этого используется команда <code>LIKE</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT * FROM users_nick WHERE status LIKE '%adm%';
    </code>
  </div>

  <%= image_tag "sql-page/select-like.png", class: "code-image mt-5" %>

  <p class="mt-5">
    Таким способом мы нашли пользователя, в столбце <code>status</code> которого есть буквы <code>adm</code>.
    Символ <code>%</code> означает любые символы в любом количестве (если нужно указать "<i>один любой символ</i>"
    используется нижнее подчеркивание <code>_</code>. Это называется метасимволы и их конечно больше чем два.
    Также в SQL существует инверсия – логический оператор означающий отрицание. Т.е. если в предыдущем примере
    перед <code>LIKE</code> написать <code>NOT</code>, то в результате мы получим все записи в которых нет букв
    <code>adm</code>.
  </p>

  <p>
    Если нужно выбрать только уникальные значения в таблице, то мы можем использовать команду
    <code>SELECT DISTINCT</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT DISTINCT status FROM users_nick;
    </code>
  </div>

  <p class="mt-5">
    Так мы получим все уникальные значения из столбца <code>status</code> таблицы <code>users_nick</code>.
  </p>

  <p>
    Также очень часто для сортировки данных используется команда <code>ORDER BY</code>. После которой мы
    должны указать имя одного или нескольких столбцов по которым и будут отсортированы выведенные данные.
    Самый простой пример её использования:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT * FROM users_nick ORDER BY nick;
    </code>
  </div>

  <%= image_tag "sql-page/select-order.png", class: "code-image mt-5" %>

  <p class="mt-5">
    Здесь мы отсортирровали данные таблицы по столбцу <code>nick</code>. И в результате получили список
    пользователей в алфавитном порядке. Но это не единственный способ. Можно, например, отсортировать
    данные не в алфавитном порядке (по возрастанию – если цифровые), но и в обратном порядке
    (по убыванию – если цифровые). Для этого к названию столбца по которому фильтруем нужно дописать
    <code>DESC</code>.
  </p>
</div>

<div class="container has-text-centered mt-6">
  <h4>Объединение таблиц в SQL</h4>

  <p class="mt-4">
    Так как таблиц в базе данных несколько, то может возникнуть необходимость показать данные сразу из
    нескольких таблиц. И отфильтровать их по каким-нибудь общим значениям. Так, например в нашей таблице
    с пользователями, пользователю <code>Pulse</code> не присвоен статус, но есть отдельная таблица со
    статусами. При этом общим параметром у нас будет <code>id</code>. Для получения данных используем команду
    <code>INNER JOIN</code>:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT users_nick.nick, users_status.status FROM users_status INNER JOIN users_nick ON users_status.id = users_nick.id;
    </code>
  </div>

  <%= image_tag "sql-page/inner-join.png", class: "code-image mt-5" %>

  <p class="mt-5">
    По сути мы объединили записи из двух разных таблиц <code>users_nick</code> и <code>users_status</code>
    в одну. Но взли только тот результат в котором совпадают <code>id</code>. По сути, это то же самое, если
    бы мы написали:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT nick, users_status.status FROM users_nick, users_status WHERE users_nick.id = users_status.id;
    </code>
  </div>

  <p class="mt-5">
    Также полезно помнить про существование итоговых функций, они нужны для получения, например,
    характеристик таблицы:
  </p>

  <ul class="m-5">
    <li><code>COUNT</code> (столбец) — возвращает количество строк;</li>
    <li><code>SUM</code> (столбец) — возвращает сумму значений в данном столбце;</li>
    <li><code>AVG</code> (столбец) — возвращает среднее значение данного столбца;</li>
    <li><code>MIN</code> (столбец) — возвращает наименьшее значение данного столбца;</li>
    <li><code>MAX</code> (столбец) — возвращает наибольшее значение данного столбца;</li>
  </ul>

  <p>Например:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT MAX(id) FROM users_nick;
    </code>
  </div>

  <%= image_tag "sql-page/select-max.png", class: "code-image mt-5" %>

  <p class="mt-5">
    покажет нам максимальное значение в столбце <code>id</code> таблицы <code>users_nick</code>.
  </p>

  <p>
    При использовании команды <code>SELECT</code> стоит помнить про команду <code>UNION</code>. Которая
    позволяет объединить два запроса <code>SELECT</code> в один.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      SELECT nick FROM users_nick WHERE nick='Pulse' UNION SELECT status FROM users_status;
    </code>
  </div>

  <%= image_tag "sql-page/select-union.png", class: "code-image mt-5" %>

  <p class="mt-5">
    В этом запросе мы сначала нашли пользователя с ником <code>Pulse</code> в одной таблице. А
    потом вывели все записи из из столбца <code>status</code> второй таблицы.
  </p>
</div>

<div class="container has-text-centered my-6">
  <h4>Некоторые нюансы языка SQL</h4>

  <p class="mt-4"><b>Регистр символов.</b></p>
  <p>
    Мы писали команды в верхнем регистре. На самом деле это не обязательно, язык SQL не чувствителен к
    регистру символов. А потому команды можно вводит как угодно: <code>SELECT</code> <code>select</code>
    <code>Select</code> – это всегда одна и та же команда. Потому верхний регистр в командах и нижний
    в названиях столбцов и таблиц используется просто для удобства. Но названия таблиц и столбцов к
    регистру чувствительны т.е. <code>users_nick</code> и <code>USERS_NICK</code> – это две разных таблицы.
  </p>

  <p><b>Пробелы</b></p>
  <p>
    Все лишние пробелы в SQL отбрасываются. Потому, например, одна инструкция может быть записана на нескольких
    строках. Можено использовать пробелы там, где тебе удобнее, это принципиально ни на что не влияет.
  </p>
</div>

<div class="container has-text-centered my-6">
  <article class="message is-danger">
    <div class="message-header">
      <p class="m-0">Обязательные ссылки для ознакомления</p>
    </div>
    <div class="message-body">
      <div class="useful-links">
        <a href="https://www.codecademy.com/learn/learn-sql/modules/learn-sql-manipulation/cheatsheet" target="_blank">
          SQL манипуляции
        </a>

        <a href="https://www.codecademy.com/learn/learn-sql" target="_blank">
          Интерактивный курс по SQL
        </a>
      </div>
    </div>
  </article>
</div>
