<div class="container has-text-centered mb-6">
  <%= image_tag "css-page/css.svg", class: "guide-image mt-4" %>

  <h1 class="mt-6">Учебное пособие по CSS</h1>
  <h2>Введение в каскадные таблицы стилей</h2>
</div>

<div class="container mt-5">
  <p>
    CSS – каскадные таблицы стилей – формальный язык описания внешнего вида документа (веб-страницы),
    написанного с использованием языка разметки.
  </p>

  <p>
    Хотя HTML является фундаментальной структурой каждой веб-страницы, он сам по себе может быть визуально
    непривлекательным. Каскадные таблицы стилей или CSS – это язык, который веб-разработчики используют для
    стилизации HTML-содержимого на веб-странице. Если вы заинтересованы в изменении цветов, типов шрифтов,
    размеров шрифтов, изображений, позиционирования элементов и т. Д., CSS – это инструмент для вашей работы.
  </p>
</div>

<div class="container has-text-centered">
  <h4 class="mt-6">Анатомия CSS</h4>

  <p class="mt-2">
    На диаграмме ниже показаны два разных метода или синтаксиса для написания кода CSS. Первый синтаксис
    показывает, что CSS применяется как набор правил, а второй показывает, что он написан как встроенный
    стиль. Два разных метода написания CSS могут сначала показаться немного устрашающими, но это не так
    уж плохо, как кажется.
  </p>

  <%= image_tag "css-page/img-1.png", class: "m-4" %>

  <p class="mt-4">
    Обратите внимание, как оба синтаксиса содержат объявление. Объявления - это ядро CSS. Они применяют
    стиль к выбранному элементу. Здесь элемент <code>&lt;p&gt;</code> был выбран в обоих синтаксисах, и ему будет
    изменен стиль для отображения текста синим цветом.
  </p>

  <p>
    Понимание того, что объявление используется для стилизации выбранного элемента, является ключом к обучению
    стилизации HTML-документов с помощью CSS.
  </p>

  <p>Приведенные ниже термины объясняют каждую из меток на диаграмме.</p>

  <p>
    <b>Селектор</b> – <i>selector</i> – начало набора правил, используемого для нацеливания на элемент, который
    будет стилизован.
    <br/>
    <b>Блок объявления</b> – <i>declaration block</i> – код между фигурными скобками ({}), который содержит
    объявление CSS.
    <br/>
    <b>Объявление</b> – <i>declaration</i> – имя группы для пары свойства и значения, которая применяет стиль к
    выбранному элементу.
    <br/>
    <b>Свойство</b> – <i>property</i> – первая часть объявления, которая указывает, какая визуальная характеристика
    элемента должна быть изменена.
    <br/>
    <b>Значение</b> – <i>value</i> – вторая часть объявления, обозначающая значение свойства.
    <br/>
    <b>Открывающий тег</b> – <i>opening tag</i> – начало HTML-элемента. Это элемент, который будет стилизован.
    <br/>
    <b>Атрибут</b> – <i>attribute</i> – атрибут стиля используется для добавления встроенных стилей CSS к элементу
    HTML.
  </p>


  <h4 class="mt-6">Встроенные стили</h4>

  <p class="mt-4">
    Хотя CSS – это другой язык, в отличии от HTML, можно писать код CSS непосредственно в коде HTML, используя
    встроенные стили.
  </p>

  <p>
    Чтобы стилизовать элемент HTML, вы можете добавить атрибут стиля непосредственно к открывающему тегу. После
    добавления атрибута вы можете установить его равным стилю (стилям) CSS, который вы хотите применить к этому
    элементу.
  </p>

  <code>&lt;p style='color: red;'&gt;I'm learning to code!&lt;/p&gt;</code>

  <p class="mt-5">
    Код в приведенном выше примере демонстрирует, как использовать встроенные стили. Элемент абзаца имеет атрибут
    стиля в открывающем теге. Затем атрибут стиля устанавливается равным color: red;, который устанавливает цвет
    текста абзаца для чтения в браузере.
  </p>

  <p>
    Если вы хотите добавить несколько стилей со встроенными стилями, просто продолжайте добавлять их к атрибуту
    стиля. Убедитесь, что стили завершены точкой с запятой (;).
  </p>

  <code>&lt;p style='color: red; font-size: 20px;'&gt;I'm learning to code!&lt;/p&gt;</code>

  <p class="mt-5">
    Важно знать, что встроенные стили – это быстрый способ непосредственно стилизовать элемент HTML, но они редко
    используются при создании веб-сайтов. Но вы можете столкнуться с обстоятельствами, когда необходимы встроенные
    стили, поэтому понимание того, как они работают, и распознавание их в HTML-коде – хорошее знание.
  </p>


  <h4 class="mt-6">Внутренняя таблица стилей</h4>

  <p class="mt-4">
    Как уже говорилось ранее, встроенные стили – не лучший способ стилизовать элементы HTML. Если вы хотите
    стилизовать, например, несколько элементов <code>&lt;h1&gt;</code>, вам придется вручную добавить встроенный
    стиль к каждому элементу. Кроме того, вам также придется поддерживать HTML-код при добавлении дополнительных
    элементов <code>&lt;h1&gt;</code>.
  </p>

  <p>
    К счастью, HTML позволяет писать код CSS в отдельном выделенном разделе с элементом <code>&lt;style&gt;</code>,
    вложенным внутри элемента <code>&lt;head&gt;</code>. Код CSS внутри элемента <code>&lt;style&gt;</code> часто
    называют внутренней таблицей стилей.
  </p>

  <p>
    Внутренняя таблица стилей имеет определенные преимущества и варианты использования по сравнению со встроенными
    стилями, но, опять же, это не лучшая практика (мы до нее доберемся, обещаем). Понимание того, как использовать
    внутренние таблицы стилей, тем не менее, полезно иметь.
  </p>

  <p>
    Чтобы создать внутреннюю таблицу стилей, элемент <code>&lt;style&gt;</code> должен быть помещен внутри элемента
    <code>&lt;head&gt;</code>.
  </p>


  <div style="text-align: initial" class="mx-4">
    <code class="wrap-code">
      &lt;head&gt;
        &lt;style&gt;
          p {
            color: red;
            font-size: 20px;
          }
        &lt;/style&gt;
      &lt;/head&gt;
    </code>
  </div>

  <p class="mt-5">
    Код CSS в приведенном выше примере изменяет цвет всего текста абзаца на красный, а также изменяет размер
    текста на 20 пикселей. Обратите внимание, как синтаксис кода CSS соответствует (по большей части) синтаксису,
    который вы использовали для встроенного стиля. Основное отличие состоит в том, что вы можете указать, к каким
    элементам применить стиль.
  </p>


  <h4 class="mt-6">Внешняя таблица стилей</h4>

  <p class="mt-4">
    Разработчики избегают смешивания кода, сохраняя код HTML и CSS в отдельных файлах (файлы HTML содержат только
    код HTML, а файлы CSS содержат только код CSS).
  </p>

  <p>Вы можете создать внешнюю таблицу стилей, используя расширение имени файла .css, например: style.css.</p>

  <p>
    С помощью внешней таблицы стилей вы можете написать весь код CSS, необходимый для стилизации страницы, не
    жертвуя удобочитаемостью и удобством сопровождения вашего HTML-файла.
  </p>


  <h4 class="mt-6">Связывание файла CSS</h4>

  <p class="mt-4">
    Когда код HTML и CSS находятся в отдельных файлах, файлы должны быть связаны. В противном случае HTML-файл
    не сможет найти код CSS, и стиль не будет применен.
  </p>

  <p>
    Вы можете использовать HTML элемент <code>&lt;link&gt;</code> для связывания файлов HTML и CSS вместе. Элемент
    <code>&lt;link&gt;</code> должен быть помещен в заголовок HTML-файла. Это самозакрывающийся тег, для которого
    требуются следующие атрибуты:
  </p>

  <p>
    <code>href</code> – подобно элементу привязки, значением этого атрибута должен быть адрес или путь к файлу CSS.
    <br/>
    <code>rel</code> – этот атрибут описывает отношения между файлом HTML и файлом CSS. Поскольку вы устанавливаете
    ссылку на таблицу стилей, значение должно быть установлено на таблицу стилей.
  </p>

  <p>
    При связывании HTML-файла и CSS-файла элемент <code>&lt;link&gt;</code> будет выглядеть следующим образом:
  </p>

  <code>&lt;link href='https://www.site.com/stylesheets/style.css' rel='stylesheet'&gt;</code>

  <p class="mt-5">Указание пути к таблице стилей с помощью URL-адреса – это один из способов связывания таблицы стилей.</p>

  <p>
    Если файл CSS хранится в том же каталоге, что и ваш файл HTML, вы можете указать относительный путь вместо
    URL-адреса, например:
  </p>

  <code>&lt;link href='./style.css' rel='stylesheet'&gt;</code>

  <p class="mt-5">Относительный путь - очень распространенный способ связывания таблицы стилей.</p>


  <h4 class="mt-6">Селекторы типа</h4>

  <p class="mt-4">
    Декларации являются фундаментальной частью CSS, поскольку они применяют стиль к выбранному элементу. Но
    как решить, какие элементы получат стиль?
  </p>

  <p>
    Селектор используется для нацеливания на определенные элементы HTML, которые должны быть стилизованы в
    декларации. Один селектор, с которым вы, возможно, уже знакомы, – это селектор типа. Как следует из названия,
    селектор типа соответствует типу элемента в документе HTML.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      p {
        color: green;
      }
    </code>
  </div>

  <p class="mt-5">
    Это пример использования селектора типа. Тип элемента – p, который происходит из тега HTML <code>&lt;p&gt;</code>.
  </p>

  <p>
    Некоторые важные замечания по выбору типа:
  </p>
  <p>
    <span class="ml-5">Селектор типа не включает угловые скобки;</span>
    <br/>
    <span class="ml-5">
      Поскольку типы элементов часто упоминаются по имени их открывающего тега, селектор типа иногда
      называют именем тега или селектором элемента;
    </span>
  </p>


  <h4 class="mt-6">Универсальный селектор</h4>

  <p class="mt-4">
    Универсальный селектор выбирает все элементы любого типа. Нацеливание на все элементы на странице имеет
    несколько конкретных вариантов использования, таких как сброс стиля браузера по умолчанию или выбор всех
    дочерних элементов родительского элемента.
  </p>

  <p>
    Универсальный селектор использует символ <code>*</code> в том же месте, где вы указали селектор типа в
    наборе правил, например:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      * {
        font-family: Verdana;
      }
    </code>
  </div>

  <p class="mt-5">
    В приведенном выше коде для каждого текстового элемента на странице будет изменен шрифт на Verdana.
  </p>


  <h4 class="mt-6">Селекторы класса</h4>

  <p class="mt-4">
    CSS не ограничивается выбором элементов по их типу. Как вы знаете, элементы HTML также могут иметь
    атрибуты. При работе с HTML и CSS <u>атрибут класса – один из наиболее распространенных способов выбора
    элемента.</u>
  </p>

  <p>Например, рассмотрим следующий HTML-код:</p>

  <code>&lt;p class='brand'&gt;Sole Shoe Company&lt;/p&gt;</code>

  <p class="mt-5">
    Элемент абзаца в приведенном выше примере имеет атрибут class внутри открывающего тега элемента
    <code>&lt;p&gt;</code>. Атрибут класса установлен на “brand”. Чтобы выбрать этот элемент с помощью
    CSS, мы можем создать набор правил с селектором класса <code>.brand</code>.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      .brand {

      }
    </code>
  </div>

  <p class="mt-5">
    Чтобы выбрать элемент HTML по его классу с помощью CSS, перед именем класса должна быть добавлена
    точка (.). В приведенном выше примере класс – это бренд, поэтому селектором CSS для него является
    <code>.brand</code>.
  </p>


  <h4 class="mt-6">Мультиселекторы классов</h4>

  <p class="mt-4">
    Мы можем использовать CSS для выбора атрибута класса элемента HTML по имени. И до сих пор мы выбирали
    элементы, используя только одно имя класса для каждого элемента. Если бы каждый элемент HTML имел один
    класс, вся информация о стиле для каждого элемента потребовала бы новый класс.
  </p>

  <p>К счастью, можно добавить более одного имени класса к атрибуту class элемента HTML.</p>

  <p>
    Например, возможно, есть элемент заголовка, который должен быть зеленым и жирным. Вы можете написать два
    набора правил CSS следующим образом:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      .green {
        color: green;
      }

      .bold {
        font-weight: bold;
      }
    </code>
  </div>

  <p class="mt-5">Затем вы можете включить оба этих класса в один элемент HTML следующим образом:</p>

  <code>&lt;h1 class='green bold'&gt; ... &lt;/h1&gt;</code>

  <p class="mt-5">
    Мы можем добавить несколько классов в атрибут class элемента HTML, разделив их пробелом. Это позволяет
    нам смешивать и сопоставлять классы CSS для создания множества уникальных стилей без написания специального
    класса для каждой необходимой комбинации стилей.
  </p>


  <h4 class="mt-6">Селектор идентификатора</h4>

  <p class="mt-4">
    Часто бывает важно выбрать один элемент с помощью CSS, чтобы придать ему уникальный стиль. Если элемент HTML
    должен иметь уникальный стиль, мы можем присвоить ему идентификатор с помощью атрибута <code>id</code>.
  </p>

  <code>&lt;h1 id='large-title'&gt; ... &lt;/h1&gt;</code>

  <p class="mt-5">
    В отличие от класса, который принимает несколько значений и может широко использоваться во всем документе
    HTML, идентификатор элемента может иметь только одно значение и использоваться только один раз на странице.
  </p>

  <p>
    Чтобы выбрать идентификатор элемента с помощью CSS, мы добавляем к имени идентификатора знак числа (#).
    Например, если бы мы хотели выбрать HTML-элемент в приведенном выше примере, он бы выглядел так:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      #large-title {

      }
    </code>
  </div>

  <p class="mt-5">
    Имя идентификатора – <i>large-title</i>, поэтому селектор CSS для него – <code>#large-title</code>.
  </p>


  <h4 class="mt-6">Селекторы атрибута</h4>

  <p class="mt-4">
    Вы можете помнить, что некоторые элементы HTML используют атрибуты для добавления дополнительных
    деталей или функциональности к элементу. Некоторыми знакомыми атрибутами могут быть <code>href</code>
    и <code>src</code>, но их гораздо больше, включая <code>class</code> и <code>id</code>!
  </p>

  <p>
    Селектор атрибутов можно использовать для нацеливания на элементы HTML, которые уже содержат атрибуты.
    Элементы одного и того же типа могут быть нацелены по-разному по их атрибуту или значению атрибута. Это
    избавляет от необходимости добавлять новый код, например атрибуты <code>class</code> или <code>id</code>.
  </p>

  <p>Атрибуты можно выбирать аналогично типам, классам и идентификаторам.</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      [href] {
        color: magenta;
      }
    </code>
  </div>

  <p class="mt-5">
    Самый простой синтаксис – это атрибут, заключенный в квадратные скобки. В приведенном выше примере:
    <code>[href]</code> будет нацеливаться на все элементы с атрибутом href и установить цвет на пурпурный.
  </p>

  <p>
    И оттуда он может стать более детальным, добавив значения типа и/или атрибута. Один из способов -
    использовать <code>type[attribute*=value]</code>. Короче говоря, этот код выбирает элемент, атрибут
    которого содержит любой экземпляр указанного значения.
  </p>

  <p>Давайте посмотрим на пример:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      &lt;img src='/images/seasons/cold/winter.jpg'&gt;
      &lt;img src='/images/seasons/warm/summer.jpg'&gt;
    </code>
  </div>

  <p class="mt-5">
    Приведенный выше HTML-код отображает два элемента <code>&lt;img&gt;</code>, каждый из которых содержит
    атрибут src со значением, равным ссылке на файл изображения.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      img[src*='winter'] {
        height: 50px;
      }

      img[src*='summer'] {
        height: 100px;
      }
    </code>
  </div>

  <p class="mt-5">
    Теперь взгляните на приведенный выше код CSS. Селектор атрибутов используется для индивидуального
    таргетинга каждого изображения.
  </p>

  <p>
    Первый набор правил ищет элемент img с атрибутом src, который содержит строку «winter», и устанавливает
    высоту 50 пикселей.
  </p>

  <p>
    Второй набор правил ищет элемент img с атрибутом src, который содержит строку «summer», и устанавливает
    высоту 100 пикселей.
  </p>

  <p>
    Обратите внимание, что не нужно было добавлять новую разметку HTML (например, класс или идентификатор),
    и мы по-прежнему могли изменять стили каждого изображения независимо. Это одно из преимуществ использования
    селектора атрибутов.
  </p>


  <h4 class="mt-6">Селекторы псевдоклассов</h4>

  <p class="mt-4">
    Возможно, вы заметили, как внешний вид определенных элементов может измениться или находиться в другом
    состоянии после определенного взаимодействия с пользователем. Например:
  </p>

  <p>
    Когда вы щелкаете элемент <code>&lt;input&gt;</code>, появляется синяя рамка, показывающая, что он
    находится в фокусе.
    <br/>
    Когда вы нажимаете синюю ссылку <code>&lt;a&gt;</code> для перехода на другую страницу, но когда вы
    возвращаетесь, текст ссылки фиолетовый.
    <br/>
    Когда вы заполняете форму, кнопка отправки безцветна и неактивна. Но когда все поля заполнены, кнопка
    имеет цвет, показывающий, что она активна.
  </p>

  <p>
    Это все примеры селекторов псевдоклассов в действии. Фактически <code>:focus</code>, <code>:visit</code>,
    <code>:disabled</code> и <code>:active</code> – все это псевдоклассы. Такие факторы, как взаимодействие с
    пользователем, навигация по сайту и положение в DOM, могут придавать элементам другое состояние с помощью
    псевдокласса.
  </p>

  <p>
    К любому селектору можно прикрепить псевдокласс. Он всегда записывается в виде двоеточия, за которым
    следует имя. Например, <code>p:hover</code>.
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      p:hover {
        background-color: lime;
      }
    </code>
  </div>

  <p class="mt-5">
    В приведенном выше коде всякий раз, когда курсор мыши наводится на элемент абзаца, этот абзац будет иметь
    фон желтого цвета.
  </p>


  <h4 class="mt-6">Классы и идентификаторы</h4>

  <p class="mt-4">
    CSS может выбирать элементы HTML по их типу, классу и идентификатору. Классы и идентификаторы CSS имеют
    разные цели, которые могут повлиять на то, какой из них вы используете для стилизации элементов HTML.
  </p>

  <p>
    Классы CSS предназначены для повторного использования во многих элементах. Написав классы CSS, вы можете
    стилизовать элементы различными способами, смешивая классы. Например, представьте себе страницу с двумя
    заголовками. Один заголовок должен быть жирным и синим, а другой - жирным и зеленым. Вместо того, чтобы
    писать отдельные правила CSS для каждого заголовка, повторяющие код друг друга, лучше написать правило CSS
    жирным шрифтом, правило зеленого цвета и правило синего цвета. Затем вы можете присвоить одному заголовку
    классы жирным зеленым шрифтом, а другому - жирным синим классам.
  </p>

  <p>
    Хотя классы предназначены для многократного использования, идентификатор предназначен для стилизации только
    одного элемента. Как вы узнаете из следующего упражнения, идентификаторы имеют приоритет над стилями типов и
    классов. Поскольку идентификаторы переопределяют эти стили, их следует использовать экономно и только для
    элементов, которые должны всегда выглядеть одинаково.
  </p>


  <h4 class="mt-6">Специфика</h4>

  <p class="mt-4">
    Специфика – это порядок, в котором браузер определяет, какие стили CSS будут отображаться. Лучшая практика
    в CSS – стилизовать элементы с минимальной степенью специфичности, чтобы, если элементу нужен новый стиль,
    его можно было легко переопределить.
  </p>

  <p>
    Идентификаторы являются наиболее специфичным селектором в CSS, за ними следуют классы и, наконец, тип.
    Например, рассмотрим следующие HTML и CSS:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      &lt;h1 class='headline'&gt;Breaking News&lt;/h1&gt;

      h1 {
        color: red;
      }

      .headline {
        color: firebrick;
      }
    </code>
  </div>

  <p class="mt-5">
    В приведенном выше примере кода цвет заголовка будет установлен на <i>firebrick</i>, поскольку селектор
    класса более конкретен, чем селектор типа. Если атрибут ID (и селектор) был добавлен к приведенному выше
    коду, стили в теле селектора ID переопределили бы все другие стили для заголовка.
  </p>

  <p>
    Со временем, когда файлы растут вместе с кодом, многие элементы могут иметь идентификаторы, что может
    затруднить редактирование CSS, поскольку для изменения стиля элемента необходимо создать новый, более
    конкретный стиль.
  </p>

  <p>
    Чтобы стили было легко редактировать, по возможности лучше использовать селектор типа. Если нет, добавьте
    селектор класса. Если это недостаточно конкретно, рассмотрите возможность использования селектора идентификатора.
  </p>


  <h4 class="mt-6">Цепочки</h4>

  <p class="mt-4">
    При написании правил CSS можно потребовать, чтобы элемент HTML имел два или более селектора CSS одновременно.
  </p>

  <p>
    Это делается путем объединения нескольких селекторов, которые мы будем называть цепочкой. Например, если бы
    существовал специальный класс для элементов <code>&lt;h1&gt;</code>, CSS выглядел бы так, как показано ниже:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      h1.special {

      }
    </code>
  </div>

  <p class="mt-5">
    Приведенный выше код выбирает только элементы <code>&lt;h1&gt;</code> с классом special. Если элемент
    <code>&lt;p&gt;</code> также имеет специальный класс, правило в примере не будет стилизовать абзац.
  </p>


  <h4 class="mt-6">Комбинатор потомков</h4>

  <p class="mt-4">
    Помимо объединения селекторов для выбора элементов, CSS также поддерживает выбор элементов, вложенных в
    другие элементы HTML, также известные как потомки. Например, рассмотрим следующий HTML:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      &lt;ul class='main-list'&gt; &lt;li&gt; ... &lt;/li&gt;
        &lt;li&gt; ... &lt;/li&gt;
        &lt;li&gt; ... &lt;/li&gt;
      &lt;/ul&gt;
    </code>
  </div>

  <p class="mt-5">
    Вложенные элементы <code>&lt;li&gt;</code> являются потомками элемента <code>&lt;ul&gt;</code> и могут
    быть выбраны с помощью комбинатора потомков следующим образом:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      .main-list li {

      }
    </code>
  </div>

  <p class="mt-5">
    В приведенном выше примере <code>.main-list</code> выбирает элемент с классом <code>.main-list</code>
    (элемент <code>&lt;ul&gt;</code>). Потомки <code>&lt;li&gt;</code> выбираются путем добавления li в
    селектор, разделенных пробелом. В результате конечным селектором будет <code>.main-list li</code>.
  </p>

  <p>Например, рассмотрим следующий CSS:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      p {
        color: blue;
      }

      .main p {
        color: red;
      }
    </code>
  </div>

  <p class="mt-5">
    Оба эти правила CSS определяют, как должен выглядеть элемент <code>&lt;p&gt;</code>. Поскольку
    <code>.main p</code> имеет класс и тип <code>p</code> в качестве селектора, только элементы
    <code>&lt;p&gt;</code> внутри элемента <code>.main</code> будут красными. Это происходит, несмотря на то,
    что существует еще одно более общее правило, согласно которому элементы <code>&lt;p&gt;</code> должны быть
    синими.
  </p>


  <h4 class="mt-6">Множественные селекторы</h4>

  <p class="mt-4">
    Чтобы сделать CSS более кратким, можно добавить стили CSS сразу к нескольким селекторам CSS. Это
    предотвращает написание повторяющегося кода.
  </p>

  <p>Например, следующий код имеет повторяющиеся атрибуты стиля:</p>

  <div style="text-align: initial">
    <code class="wrap-code">
      h1 {
        font-family: Georgia;
      }

      .menu {
        font-family: Georgia;
      }
    </code>
  </div>

  <p class="mt-5">
    Вместо того, чтобы писать <code>font-family: Georgia;</code> дважды для двух селекторов, мы можем
    разделить селекторы запятой, чтобы применить один и тот же стиль к обоим, например:
  </p>

  <div style="text-align: initial">
    <code class="wrap-code">
      h1,
      .menu {
        font-family: Georgia;
      }
    </code>
  </div>

  <p class="mt-5">
    Разделив селекторы CSS запятой, элементы <code>&lt;h1&gt;</code> и элементы с классом меню получат стиль
    <code>font-family: Georgia</code>.
  </p>


  <h4 class="mt-6">Выводы</h4>

  <p class="mt-4">Давайте посмотрим, что вы узнали:</p>

  <p class="mb-6">
    CSS может выбирать элементы HTML по типу, классу, идентификатору и атрибуту.
    <br/>
    Все элементы можно выбрать с помощью универсального селектора.
    <br/>
    С помощью селектора псевдокласса элемент может иметь разные состояния.
    <br/>
    К одному элементу HTML можно применить несколько классов CSS.
    <br/>
    Классы можно использовать повторно, а идентификаторы - только один раз.
    <br/>
    Идентификаторы более конкретны, чем классы, а классы более конкретны, чем
    тип. Это означает, что идентификаторы будут переопределять любые стили из
    класса, а классы переопределят любые стили из селектора типа.
    <br/>
    Несколько селекторов можно объединить в цепочку, чтобы выбрать элемент.
    Это повышает конкретность, но может быть необходимо.
    <br/>
    Вложенные элементы можно выбрать, разделив селекторы пробелом.
    <br/>
    Несколько несвязанных селекторов могут получить одни и те же стили,
    разделив имена селекторов запятыми.
  </p>
</div>
